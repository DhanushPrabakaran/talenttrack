datasource db {
  provider = "postgresql"
  url      = env("TalentTrack_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String  @id @default(uuid())
  name              String
  rollNumber        String
  email             String  @unique
  password          String
  role              String  @default("student") // "student" or "admin"
  image             String  @default("https://i.pinimg.com/736x/d2/51/c1/d251c106a3a1edeb414b9cc9fe92b256.jpg")
  gitLink           String?
  linkedinLink      String?
  leetCodeLink      String?
  codeStudioLink    String?
  geeksForGeeksLink String?
  interviewBitLink  String?
  codeChefLink      String?
  codeForcesLink    String?
  hackerRankLink    String?
  website           String?

  bio             String?
  solvedQuestions Int? // Total coding questions solved
  resume          String? // Resume file URL

  // Academic Details
  age         Int?
  department  String?
  degree      String?
  marks10th   Float?
  marks12th   Float?
  marksDegree Float?

  // Achievements & Certifications
  certifications Certification[]
  experiences    Experience[]
  achievements   Achievement[]

  // Job & Event Relations
  interestedJobs JobPollInterest[]
  events         Event[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model Certification {
  id             String   @id @default(uuid())
  userId         String
  title          String
  description    String?
  issuedBy       String
  issueDate      DateTime
  certificateUrl String?

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

model Experience {
  id          String    @id @default(uuid())
  userId      String
  company     String
  role        String
  startDate   DateTime
  endDate     DateTime?
  description String?

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

model Achievement {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String?
  date        DateTime

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

model JobPoll {
  id                 String            @id @default(uuid())
  title              String
  description        String
  company            String
  deadline           DateTime
  interestedStudents JobPollInterest[]
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
}

model JobPollInterest {
  id         String   @id @default(uuid())
  userId     String
  jobPollId  String
  responseAt DateTime @default(now()) // Stores response time

  user    User    @relation(fields: [userId], references: [id])
  jobPoll JobPoll @relation(fields: [jobPollId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, jobPollId]) // Prevent duplicate entries
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String
  date        DateTime
  createdAt   DateTime @default(now())
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?
}
